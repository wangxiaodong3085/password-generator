package com.private.test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import com.google.common.collect.Sets;

/**
 * @author wxd
 * @date 2019年08月04日 18:37
 * @since JDK 1.8
 */
public class PasswordRecordService {
    private static Set<String> INITIAL_TABLE = Sets.newHashSet("b", "p", "m", "f", "d", "t", "n", "l", "ɡ",
        "k", "h", "j", "q", "x", "zh", "ch", "sh", "r", "z", "c", "s", "y", "w");
    private static Set<String> FINAL_TABLE = Sets.newHashSet("a", "o", "e", "ai", "ei", "ao", "ou", "an", "en",
        "ang", "u",
        "eng", "ong", "i", "ia", "ie"
        //, "iao", "iou", "ian", "in","iang", "iong",  "ua", "uai", "uan", "uen","uang", "ueng"
    );
    private static final Integer MAX_PINYIN_WORDS_LENGTH = 3;

    private String[] COMPANIES = {"中银国际", "BOCI", "招商银行", "17173", "QQ3085", "QQ27",
        "淘宝", "支付宝", "美团", "京东", "12306", "汇丰", "汇丰香港"};
    private String[] TYPES = {"登陆密码", "支付密码", "动态验证码", "密码验证问题", "账号"};

    public static void main(String[] args) {
        PasswordRecordService passwordRecordService = new PasswordRecordService();
        passwordRecordService.printPasswordRecord();
    }

    private Map<Integer, List<String>> pinyinMap = new HashMap<>();
    private List<Integer> orderedPinyinLength;
    private Integer minPinyinLength;

    {
        INITIAL_TABLE.forEach(init ->
            FINAL_TABLE.forEach(fin ->
                {
                    String pinyin = init + fin;
                    int length = pinyin.length();
                    List<String> pinyins = pinyinMap.computeIfAbsent(length, k -> new ArrayList<>());
                    pinyins.add(pinyin);
                }
            )
        );
        orderedPinyinLength = new ArrayList<>(pinyinMap.keySet());
        orderedPinyinLength.sort(Integer::compareTo);
        minPinyinLength = orderedPinyinLength.get(0);
    }

    public void printPasswordRecord() {
        for (int i = 0; i < 100000; i++) {
            String company = getRandomFromStringArray(COMPANIES);
            String type = getRandomFromStringArray(TYPES);
            String password = getPassword(6, 10, 1, 4);
            System.out.println(String.join(",", company, type, password));
        }
    }

    private String getRandomFromStringArray(String[] array) {
        Random random = new Random();

        int cnt = random.nextInt(array.length);
        return array[cnt];
    }

    private String getPassword(int minAlpLength, int maxAlpLength, int minDigitLength, int maxDigitLength) {
        if (maxAlpLength < minAlpLength || maxDigitLength < minDigitLength) {
            throw new IllegalArgumentException();
        }

        Random alphaRandom = new Random();
        int alphaLength = minAlpLength + alphaRandom.nextInt(maxAlpLength - minAlpLength + 1);
        Random digitRandom = new Random();
        int digitLength = minDigitLength + digitRandom.nextInt(maxDigitLength - minDigitLength + 1);
        Random upcaseRandom = new Random();
        int upcaseAlphaLength = upcaseRandom.nextInt(alphaLength + 1);

        return getAlphaPart(alphaLength, upcaseAlphaLength) + getRandomDigit(digitLength);
    }

    private String getAlphaPart(int alphaLength, int upcaseAlphaLength) {
        Random random = new Random();
        if (random.nextBoolean()) {
            String randomPinyin = getRandomPinyinAlpha(alphaLength, upcaseAlphaLength);
            if (randomPinyin != null) {
                return randomPinyin;
            }
        }
        return getRandomAlpha(alphaLength, upcaseAlphaLength);
    }

    private String getRandomPinyinAlpha(int alphaLength, int upcaseAlphaLength) {
        List<String> validatePinyin = getValidatePinyinAlphaList(alphaLength);
        if (validatePinyin.isEmpty()) {
            return null;
        }

        Random random = new Random();
        int index = random.nextInt(validatePinyin.size());
        String result = validatePinyin.get(index);
        return result.substring(0, upcaseAlphaLength).toUpperCase() + result.substring(upcaseAlphaLength);
    }

    private Map<Integer, List<String>> tmpValidateRecord = new HashMap<>();

    private List<String> getValidatePinyinAlphaList(int alphaLength) {
        return getValidatePinyinAlphaList(alphaLength, 1);
    }

    private List<String> getValidatePinyinAlphaList(int alphaLength, int curWords) {
        if (curWords >= MAX_PINYIN_WORDS_LENGTH) {
            return new ArrayList<>();
        }

        if (alphaLength < minPinyinLength) {
            return new ArrayList<>();
        }

        if (tmpValidateRecord.get(alphaLength) != null) {
            return tmpValidateRecord.get(alphaLength);
        }

        List<String> finStrList = new ArrayList<>();
        for (int curLength : orderedPinyinLength) {
            if (curLength == alphaLength) {
                finStrList.addAll(pinyinMap.get(curLength));
            } else {
                List<String> subStrList = getValidatePinyinAlphaList(alphaLength - curLength, curWords + 1);
                if (!subStrList.isEmpty()) {
                    pinyinMap.get(curLength).forEach(lefRow ->
                        subStrList.forEach(subStr -> finStrList.add(lefRow + subStr))
                    );
                }
            }
        }

        if (!finStrList.isEmpty()) {
            tmpValidateRecord.put(alphaLength, finStrList);
        }
        return finStrList;
    }

    private String getRandomAlpha(int alphaLength, int upcaseAlphaLength) {
        StringBuilder sb = new StringBuilder();
        Random random = new Random();
        for (int i = 0; i < alphaLength; i++) {
            char alpha = (char)('a' + random.nextInt(26));
            if (i < upcaseAlphaLength) {
                alpha = (char)('A' - 'a' + alpha);
            }
            sb.append(alpha);
        }
        return sb.toString();
    }

    private String getRandomDigit(int digitLength) {
        StringBuilder sb = new StringBuilder();
        Random random = new Random();
        for (int i = 0; i < digitLength; i++) {
            sb.append(random.nextInt(10));
        }

        return sb.toString();
    }

    private static class PasswordAccountDO {
        public PasswordAccountDO(String company, String type) {
            this.company = company;
            this.type = type;
        }

        private String company;
        private String type;

        public String getCompany() {
            return company;
        }

        public void setCompany(String company) {
            this.company = company;
        }

        public String getType() {
            return type;
        }

        public void setType(String type) {
            this.type = type;
        }
    }
}
